# Stubs for koji (Python 2)
#
# NOTE: This dynamically typed stub was automatically generated by stubgen.

from typing import Any
import xml.sax.handler
import logging

PROFILE_MODULES = ... # type: Any
RPM_HEADER_MAGIC = ... # type: Any
RPM_TAG_HEADERSIGNATURES = ... # type: Any
RPM_TAG_FILEDIGESTALGO = ... # type: Any
RPM_SIGTAG_PGP = ... # type: Any
RPM_SIGTAG_MD5 = ... # type: Any
RPM_SIGTAG_GPG = ... # type: Any
RPM_FILEDIGESTALGO_IDS = ... # type: Any

class Enum(dict):
    def __init__(self, *args): ...
    def __getitem__(self, key): ...
    def get(self, key, default=None): ...
    def getnum(self, key, default=None): ...
    getvalue = ... # type: Any
    __setitem__ = ... # type: Any
    __delitem__ = ... # type: Any
    clear = ... # type: Any
    pop = ... # type: Any
    popitem = ... # type: Any
    update = ... # type: Any
    setdefault = ... # type: Any

API_VERSION = ... # type: Any
TASK_STATES = ... # type: Any
BUILD_STATES = ... # type: Any
USERTYPES = ... # type: Any
USER_STATUS = ... # type: Any
AUTHTYPE_NORMAL = ... # type: Any
AUTHTYPE_KERB = ... # type: Any
AUTHTYPE_SSL = ... # type: Any
DEP_REQUIRE = ... # type: Any
DEP_PROVIDE = ... # type: Any
DEP_OBSOLETE = ... # type: Any
DEP_CONFLICT = ... # type: Any
RPMSENSE_LESS = ... # type: Any
RPMSENSE_GREATER = ... # type: Any
RPMSENSE_EQUAL = ... # type: Any
REPO_STATES = ... # type: Any
REPO_INIT = ... # type: Any
REPO_READY = ... # type: Any
REPO_EXPIRED = ... # type: Any
REPO_DELETED = ... # type: Any
REPO_PROBLEM = ... # type: Any
BR_STATES = ... # type: Any
BR_TYPES = ... # type: Any
TAG_UPDATE_TYPES = ... # type: Any
CHECKSUM_TYPES = ... # type: Any
BASEDIR = ... # type: Any
PRIO_DEFAULT = ... # type: Any

class GenericError(Exception):
    faultCode = ... # type: Any
    fromFault = ... # type: Any

class LockError(GenericError):
    faultCode = ... # type: Any

class AuthError(GenericError):
    faultCode = ... # type: Any

class TagError(GenericError):
    faultCode = ... # type: Any

class ActionNotAllowed(GenericError):
    faultCode = ... # type: Any

class BuildError(GenericError):
    faultCode = ... # type: Any

class AuthLockError(AuthError):
    faultCode = ... # type: Any

class AuthExpired(AuthError):
    faultCode = ... # type: Any

class SequenceError(AuthError):
    faultCode = ... # type: Any

class RetryError(AuthError):
    faultCode = ... # type: Any

class PreBuildError(BuildError):
    faultCode = ... # type: Any

class PostBuildError(BuildError):
    faultCode = ... # type: Any

class BuildrootError(BuildError):
    faultCode = ... # type: Any

class FunctionDeprecated(GenericError):
    faultCode = ... # type: Any

class ServerOffline(GenericError):
    faultCode = ... # type: Any

class LiveCDError(GenericError):
    faultCode = ... # type: Any

class PluginError(GenericError):
    faultCode = ... # type: Any

class CallbackError(PluginError):
    faultCode = ... # type: Any

class ApplianceError(GenericError):
    faultCode = ... # type: Any

class ParameterError(GenericError):
    faultCode = ... # type: Any

class ImportError(GenericError):
    faultCode = ... # type: Any

class ConfigurationError(GenericError):
    faultCode = ... # type: Any

class LiveMediaError(GenericError):
    faultCode = ... # type: Any

class MultiCallInProgress: ...

def convertFault(fault): ...
def listFaults(): ...
def encode_args(*args, **opts): ...
def decode_args(*args): ...
def decode_args2(args, names, strict=True): ...
def encode_int(n): ...
def decode_int(n): ...
def safe_xmlrpc_loads(s): ...
def ensuredir(directory): ...
def daemonize(): ...
def multibyte(data): ...
def find_rpm_sighdr(path): ...
def rpm_hdr_size(f, ofs=None): ...

class RawHeader:
    header = ... # type: Any
    def __init__(self, data): ...
    def version(self): ...
    def dump(self): ...
    def __getitem__(self, key): ...
    def get(self, key, default=None): ...

def rip_rpm_sighdr(src): ...
def rip_rpm_hdr(src): ...
def get_sigpacket_key_id(sigpacket): ...
def get_sighdr_key(sighdr): ...
def splice_rpm_sighdr(sighdr, src, dst=None, bufsize=8192): ...
def get_rpm_header(f, ts=None): ...
def get_header_field(hdr, name): ...
def get_header_fields(X, fields): ...
def parse_NVR(nvr): ...
def parse_NVRA(nvra): ...
def is_debuginfo(name): ...
def canonArch(arch): ...

class POMHandler(xml.sax.handler.ContentHandler):
    tag_stack = ... # type: Any
    tag_content = ... # type: Any
    values = ... # type: Any
    fields = ... # type: Any
    def __init__(self, values, fields): ...
    def startElement(self, name, attrs): ...
    def characters(self, content): ...
    def endElement(self, name): ...
    def reset(self): ...

ENTITY_RE = ... # type: Any

def parse_pom(path=None, contents=None): ...
def pom_to_maven_info(pominfo): ...
def maven_info_to_nvr(maveninfo): ...
def mavenLabel(maveninfo): ...
def hex_string(s): ...
def make_groups_spec(grplist, name='', buildgroup=None): ...
def generate_comps(groups, expand_groups=False): ...
def genMockConfig(name, arch, managed=False, repoid=None, tag_name=None, **opts): ...
def get_sequence_value(cursor, sequence): ...
def format_exc_plus(): ...
def openRemoteFile(relpath, topurl=None, topdir=None): ...
def config_directory_contents(dir_name): ...
def read_config(profile_name, user_config=None): ...
def get_profile_module(profile_name, config=None): ...

class PathInfo:
    ASCII_CHARS = ... # type: Any
    def __init__(self, topdir=None): ...
    def topdir(self): ...
    def volumedir(self, volume): ...
    def build(self, build): ...
    def mavenbuild(self, build): ...
    def mavenrepo(self, maveninfo): ...
    def mavenfile(self, maveninfo): ...
    def winbuild(self, build): ...
    def winfile(self, wininfo): ...
    def imagebuild(self, build): ...
    def rpm(self, rpminfo): ...
    def signed(self, rpminfo, sigkey): ...
    def sighdr(self, rpminfo, sigkey): ...
    def build_logs(self, build): ...
    def repo(self, repo_id, tag_str): ...
    def repocache(self, tag_str): ...
    def taskrelpath(self, task_id): ...
    def work(self): ...
    def tmpdir(self): ...
    def scratch(self): ...
    def task(self, task_id): ...

pathinfo = ... # type: Any

class VirtualMethod:
    def __init__(self, func, name): ...
    def __getattr__(self, name): ...
    def __call__(self, *args, **opts): ...

class ClientSession:
    baseurl = ... # type: Any
    opts = ... # type: Any
    authtype = ... # type: Any
    multicall = ... # type: Any
    logger = ... # type: Any
    def __init__(self, baseurl, opts=None, sinfo=None): ...
    logged_in = ... # type: Any
    callnum = ... # type: Any
    sinfo = ... # type: Any
    def setSession(self, sinfo): ...
    def login(self, opts=None): ...
    def subsession(self): ...
    def krb_login(self, principal=None, keytab=None, ccache=None, proxyuser=None): ...
    def ssl_login(self, cert, ca, serverca, proxyuser=None): ...
    def logout(self): ...
    def __del__(self): ...
    def callMethod(self, name, *args, **opts): ...
    def multiCall(self, strict=False): ...
    def __getattr__(self, name): ...
    def fastUpload(self, localfile, path, name=None, callback=None, blocksize=None, overwrite=False): ...
    def uploadWrapper(self, localfile, path, name=None, callback=None, blocksize=None, overwrite=True): ...
    def downloadTaskOutput(self, taskID, fileName, offset=0, size=-1): ...

class DBHandler(logging.Handler):
    cnx = ... # type: Any
    table = ... # type: Any
    mapping = ... # type: Any
    def __init__(self, cnx, table, mapping=None): ...
    def emit(self, record): ...

TIMESTAMP_RE = ... # type: Any

def parse_timestamp(ts): ...
def formatTime(value): ...
def formatTimeLong(value): ...
def buildLabel(buildInfo, showEpoch=False): ...
def taskLabel(taskInfo): ...
def fixEncoding(value, fallback=''): ...
def add_file_logger(logger, fn): ...
def add_stderr_logger(logger): ...
def add_sys_logger(logger): ...
def add_mail_logger(logger, addr): ...
def add_db_logger(logger, cnx): ...
def remove_log_handler(logger, handler): ...
